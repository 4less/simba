#!/usr/bin/env python
import argparse
import math
import os
import glob
import sys
import random
import stat
import subprocess
from src.tree_node import TreeNode
from src.genome import Genome, load_genomes
from src.options import get_simba_argument_parser

import matplotlib.pyplot as plt
import numpy as np

from scipy.stats import nbinom
from scipy.stats import powerlaw
from scipy.stats import pareto

from ete3 import Tree, TreeStyle, TextFace, add_face_to_node
from gtdb import GTDB
from instructions import *

from src.utils import *

fig, ax = plt.subplots(1, 1)

# Create the parser
# my_parser = argparse.ArgumentParser(description='Select random genomes')
my_parser = get_simba_argument_parser()

##############################################################################
# Parse input
##############################################################################

args = my_parser.parse_args()


# I/O

output_folder = args.output
genome_list = args.genome_list
genome_folder = args.genome_folder
taxonomy_file = args.taxonomy

selected_genomes_file = args.selected_genomes
instructions_file = args.instructions

# params
n = args.num_genomes
m = args.samples

max_genomes_per_species = args.max_genomes_per_species
max_genomes_per_genus = args.max_genomes_per_genus
max_genomes_per_family =  args.max_genomes_per_family

min_phylum_coverage = args.min_phylum_coverage

# simulation params
error_rate = args.error_rate
indel_rate = args.indel_rate
mutation_rate = args.mutation_rate
read_length = args.read_length

target_coverage = args.target_coverage

execute = args.execute

disable_plots = args.no_plots
copy_genomes = args.copy_genomes


random.seed()


##############################################################################
# Global variables
##############################################################################

taxonomy = GTDB(taxonomy_file)

species_counter = dict()
genera_counter = dict()
families_counter = dict()
phyla = set()
classes = set()
orders = set()


# selected genomes in tree
tree_nodes = dict()
lines = []


genome2lin = dict()
genomes = []

selected_genomes = set()


##############################################################################
# Load taxonomy
##############################################################################

with open(taxonomy_file, 'r') as file:
    for line in file:
        line = line.rstrip()

        tokens = line.split('\t')

        genome2lin[tokens[0]] = tokens[1]


##############################################################################
# Load genome list
##############################################################################

if genome_list != None:
    with open(genome_list, 'r') as file:
       for line in file:
          line = line.rstrip()

          genomes.append(line)
elif genome_folder is not None:
    genomes = load_genomes(genome_folder, genome_list)
else:
    genomes = [genome for genome in genome2lin.keys()]


##############################################################################
# Helper functions
##############################################################################

def register(genome: str):
    species = taxonomy.GetAt(genome, 's')
    genus = taxonomy.GetAt(genome, 'g')
    family = taxonomy.GetAt(genome, 'f')
    phylum = taxonomy.GetAt(genome, 'p')
    classt = taxonomy.GetAt(genome, 'c')
    order = taxonomy.GetAt(genome, 'o')

    phyla.add(phylum)
    classes.add(classt)
    orders.add(order)

    if species in species_counter:
        species_counter[species] += 1
    else:
        species_counter[species] = 1
    if genus in genera_counter:
        genera_counter[genus] += 1
    else:
        genera_counter[genus] = 1
    if family in families_counter:
        families_counter[family] += 1
    else:
        families_counter[family] = 1

def is_genome_valid(genome: str, taxonomy):
    species = taxonomy.GetAt(genome, 's')
    genus = taxonomy.GetAt(genome, 'g')
    family = taxonomy.GetAt(genome, 'f')
    phylum = taxonomy.GetAt(genome, 'p')


    if len(phyla) < min_phylum_coverage:
        if phylum in phyla:
            return False


    if species in species_counter and species_counter[species] >= max_genomes_per_species:
        return False
    if genus in genera_counter and genera_counter[genus] >= max_genomes_per_genus:
        return False
    if family in families_counter and families_counter[family] >= max_genomes_per_family:
        return False

    register(genome)

    return True


##############################################################################
# Run simulation script
##############################################################################



# Select genomes
##########################################

print("Select {} genomes from a pool of {} genomes.".format(n, len(genomes)))


if instructions_file:
    print("Instructions")
    instructions = Instructions()
    instructions.Load(instructions_file)

    # for genome in instructions.genomes:
        # print(genome.ToString())

    print("IsInit: {}".format(instructions.IsInitialized()))
    if not instructions.IsInitialized():
        GenomeSelector.Select(instructions, taxonomy, genomes)
        profile_output = "{}/profile.tsv".format(output_folder)
        instructions.WriteProfile(profile_output)

    for gkey, gvalue in instructions.groups.items():
        genome = gvalue.Select()[0]
        print("{} -> {}".format(gkey, genome.genome_var.GetValue()))
        selected_genomes.add(genome.genome_var.GetValue())

    print("selected_genomes {}".format(selected_genomes))
else:
    if selected_genomes_file == None:
        print(genomes)
        print(len(genomes))
        while len(selected_genomes) < n:
            random_genome = genomes[random.randint(0,len(genomes)-1)]

            # if not is_genome_valid(random_genome):
            #     continue

            selected_genomes.add(random_genome)
    else:
        with open(selected_genomes_file, 'r') as file:
            for line in file:
                genome = line.rstrip()

                selected_genomes.add(line)

print(f"Selected genomes: {len(selected_genomes)} {selected_genomes}")
print('\n'.join([g.to_string() for g in selected_genomes]))
exit(9)


# Output genome selection stats
##########################################


mkdir_if_not_exists(output_folder)

output_selected_genomes = output_folder + "/genomes.txt"
output_tree = output_folder + "/tree.nwk"
output_tree_img = output_folder + "/tree.png"
output_meta = output_folder + "/meta.txt"


with open(output_selected_genomes, 'w') as outfile:
    for genome in selected_genomes:
        outfile.write(genome)
        outfile.write('\n')

nwk = NewickTree(selected_genomes, taxonomy, tree_nodes)

with open(output_tree, 'w') as outfile:
    outfile.write(nwk)




# Render newick tree!
##########################################

# t = Tree(nwk)
if not disable_plots:
    t = Tree( nwk, quoted_node_names=True, format=1)

    ts = TreeStyle()
    ts.show_leaf_name = False

    def my_layout(node):
            if node.is_leaf():
                Name = TextFace(
                    node.name, 
                    tight_text=True, 
                    fsize=10)
                Lineage = TextFace(genome2lin[node.name],
                    tight_text=True, 
                    fsize=10)
                Lineage.margin_left = 20
                Name.margin_left = 10
                add_face_to_node(Name, node, column=1, position='aligned')
                add_face_to_node(Lineage, node, column=2, position='aligned')


    ts.min_leaf_separation = 20
    ts.branch_vertical_margin = 10
    ts.layout_fn = my_layout

    t.render(output_tree_img, w=2000, tree_style=ts)


with open(output_meta, 'w') as outfile:
    outfile.write("{} genomes span\n".format(len(selected_genomes)))
    outfile.write("{} species,\n".format(len(species_counter)))
    outfile.write("{} genera,\n".format(len(genera_counter)))
    outfile.write("{} families,\n".format(len(families_counter)))
    outfile.write("{} orders,\n".format(len(orders)))
    outfile.write("{} classes and\n".format(len(classes)))
    outfile.write("{} phyla.\n".format(len(phyla)))




##############################################################################
# Simulate reads
##############################################################################

output_script = output_folder + "/simulate.sh"
read_folder = output_folder + "/reads/"
new_genome_folder = output_folder + "/genomes/"
distribution_output = output_folder + '/distribution.png'
composition_output = output_folder + '/composition.tsv'

genome_path_template = genome_folder + "/{}.fna"

mkdir_if_not_exists(read_folder)
read_folder_abs = os.path.abspath(read_folder)


def g2path(genome: str):
    global genome_folder
    genome_path_template = genome_folder + "/{}.fna"
    print("PATH: {}".format(os.path.abspath(genome_path_template.format(genome))))
    return os.path.abspath(genome_path_template.format(genome))


selected_genomes = [ Genome(sg, g2path(sg), fasta_length(g2path(sg))) for sg in selected_genomes]


# Render newick tree!
##########################################

data_points = len(selected_genomes)
x, y = pareto_distr(data_points)
y1 = [e[0] for e in y]

print("y: {}".format(y1 ))
print("ysum: {}".format(sum(y1 )))

if not disable_plots:
    plot_distr(x, y, distribution_output)



# Calculate read counts from abundance and genome_size
#########################################################

abundance_idx = 0
read_counts = []

y = [e[0] for e in y]


for genome in selected_genomes:
    read_counts.append(read_count(y[abundance_idx], read_length, genome.size))
    abundance_idx += 1

genomes_total_length = sum([g.size for g in selected_genomes])
total_reads_count = sum(read_counts)

# Determine read count to achieve mean coverage
total_reads_count = int(target_coverage * genomes_total_length / read_length)

read_counts = upscale_read_count(read_counts, total_reads_count)#[e[0] for e in ]



# Output metagenome composition
#########################################################

with open(composition_output, 'w') as outfile:
    outfile.write('\t'.join(["genome", "size", "rel_abundance", "read_count", "sequencing_depth", "lineage", "absolute_path"]))
    outfile.write('\n')
    idx = 0

    for genome in selected_genomes:
        vert_cov = vertical_coverage(int(read_counts[idx]), read_length, genome.size)
        outfile.write(
            "{}\t{}\t{}\t{}\t{}\t{}\t{}\n".format(
                genome.genome, 
                genome.size, 
                y[idx], 
                read_counts[idx], 
                vert_cov,
                genome2lin[genome.genome],
                genome.path))

        idx += 1



# Write to simulate script
#########################################################

wgsim_command = "wgsim -R {{indel_rate}} -r {{mutation_rate}} -e ${{error_rate}} -N {} -1 {} -2 {} {} {} {}\n"
cp_command = "cp {} {}\n"

read1_templ = "${{read_folder}}/{}_1.fastq"
read2_templ = "${{read_folder}}/{}_2.fastq"

with open(output_script, 'w') as outfile:
    outfile.write("#!/bin/bash\n")
    outfile.write("error_rate={}\n".format(error_rate))
    outfile.write("indel_rate={}\n".format(indel_rate))
    outfile.write("mutation_rate={}\n".format(mutation_rate))
    outfile.write("read_folder={}\n".format(read_folder_abs))

    if copy_genomes:
        mkdir_if_not_exists(new_genome_folder)
    else:
        if new_genome_folder.endswith('/'):
            ngf = new_genome_folder[:-1]
        outfile.write("ln -s {} {}\n".format(os.path.abspath(genome_folder), ngf))

    for genome, count in zip(selected_genomes, read_counts):
        if copy_genomes:
            outfile.write("cp {} {}\n".format(genome.path, "{}/{}_ex.fna".format(new_genome_folder, genome.genome)))

        outfile.write(wgsim_command.format(
            int(count),
            read_length, 
            read_length, 
            genome.path, 
            read1_templ.format(genome.genome), 
            read2_templ.format(genome.genome)))

    outfile.write("cd {}\n".format(read_folder_abs))
    outfile.write("cat *_1.fastq > reads_1.fastq\n")
    outfile.write("cat *_2.fastq > reads_2.fastq\n")
    outfile.write("ls -1a | grep '.fastq' | grep -v 'reads' | xargs -I % /bin/bash -c 'gzip %'\n")


make_executable(output_script)

if execute:
    os.system(output_script)


