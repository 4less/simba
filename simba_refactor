#!/usr/bin/env python
import argparse
import math
import os
import glob
import sys
import random
import stat
import subprocess
from ete3 import Tree

from src.profile_generator import ProfileGenerator
from src.rules import SpecificRule
from src.selector import Selector
from src.tree_node import TreeNode
from src.genome import Genome, load_genomes
from src.options import get_simba_argument_parser, get_simba_refactor_argument_parser, Args
from src.genome_resource import GenomeResource, Rank
from src.utils import mkdir_if_not_exists

## Parse args
parser = get_simba_refactor_argument_parser()
args = parser.parse_args()

# general
output_folder = getattr(args, Args.OUTPUT_FOLDER)
output_folder_scripts = getattr(args, Args.OUTPUT_FOLDER_SCRIPTS)

mkdir_if_not_exists(output_folder_scripts)

# within sample params
conspecific = getattr(args, Args.CONSPECIFIC)
species_number = getattr(args, Args.SPECIES_NUMBER)

# between sample params
sample_number = getattr(args, Args.SAMPLES)
shared_species_number_total = getattr(args, Args.SHARED_SPECIES_NUMBER_TOTAL)


# IO
gr = GenomeResource(getattr(args, Args.GENOME_MAP))

# Select
if not gr.has_x_of_rank(species_number, Rank.Species):
    print("Not enough species in the genome map")
    exit(9)


rule = SpecificRule()
rule.name = "Get Escherichia"
rule.taxon = "g__Escherichia"
rule.species_min = 1
rule.species_max = 4
rule.species_total_genomes_min = 5
rule.species_total_genomes_max = 2000

# across samples
rule.species_total_genomes_min = 2
rule.species_total_genomes_max = 2

# within sample
rule.species_conspecific_min = 1
rule.species_conspecific_max = 2

rule.prevalence_across_samples = 1

print("apply")
rule.apply(gr, sample_number)

exit(9)



# Generate 
for s in range(sample_number):
    print("Sample {}".format(s))
    sample_folder = "sample_{}".format(s)
    sample_shell_script = "{}/sample_{}.sh".format(output_folder_scripts, s)
    
    # Select species
    selected_species = Selector.select_species(gr, -1, predicate=lambda x: not x.r_species.startswith('s__GUT'))
    selected_genomes = Selector.select_genomes_for_species(gr, selected_species)
    genomes, vcovs = ProfileGenerator.generate_vertical_coverage(selected_genomes, 0.2, 70)
    
    sample_output_folder = "{}/{}".format(output_folder, sample_folder)
    mkdir_if_not_exists(sample_output_folder)
    ProfileGenerator.generate(sample_output_folder, sample_shell_script, genomes, vcovs, "sample_{}".format(s))
    
    
    