#!/usr/bin/env python
import argparse
import math
import os
import glob
import sys
import random
import stat
import subprocess
from ete3 import Tree

from src.profile_generator import ProfileGenerator
from src.selector import Selector
from src.tree_node import TreeNode
# from src.genome import Genome, load_genomes
from src.options import get_simba_argument_parser, get_simba_refactor_argument_parser, Args
from src.genome_resource import GenomeResource, Rank, Genome
from src.utils import mkdir_if_not_exists

## Parse args
parser = get_simba_refactor_argument_parser()
args = parser.parse_args()

# general
output_folder = os.path.abspath(getattr(args, Args.OUTPUT_FOLDER))
output_folder_scripts = os.path.abspath(getattr(args, Args.OUTPUT_FOLDER_SCRIPTS))

mkdir_if_not_exists(output_folder_scripts)

# within sample params
conspecific = getattr(args, Args.CONSPECIFIC)
species_number = getattr(args, Args.SPECIES_NUMBER)

# between sample params
sample_number = getattr(args, Args.SAMPLES)
shared_species_number_total = getattr(args, Args.SHARED_SPECIES_NUMBER_TOTAL)


# IO
gr = GenomeResource(getattr(args, Args.GENOME_MAP))

# Select
if not gr.has_x_of_rank(species_number, Rank.Species):
    print("Not enough species in the genome map")
    exit(9)


def add_genomes_to_species_dict(species_dict, genomes):
    print("Add")
    for genome in genomes:
        species = genome.r_species

        if species not in species_dict:
            species_dict[species] = set()
        species_dict[species].add(genome)

genomes_per_species = dict()

samples_output_folder = os.path.join(output_folder, "samples")
profile_output_folder = os.path.join(output_folder, "gold_profiles")
roary_output_folder = os.path.join(output_folder, "roary_output")
sim_script_output_folder = os.path.join(output_folder_scripts, "read_simulation")
mkdir_if_not_exists(samples_output_folder)
mkdir_if_not_exists(profile_output_folder)
mkdir_if_not_exists(roary_output_folder)
mkdir_if_not_exists(sim_script_output_folder)

# Generate 
for s in range(sample_number):
    print("Sample {}".format(s))
    sample_folder = "sample_{}".format(s)
    sample_sim_shell_script = "{}/sample_{}.sh".format(sim_script_output_folder, s)
    gold_standard_profile = "{}/gold_standard_{}.profile".format(profile_output_folder, s)
    
    # Select species
    selected_species = Selector.select_species(gr, species_number, predicate=lambda x: not x.r_species.startswith('s__GUT'))
    selected_genomes = Selector.select_genomes_for_species(gr, selected_species)

    # map(lambda x: add_genomes_to_species_dict(genomes_per_species, x), selected_genomes)
    add_genomes_to_species_dict(genomes_per_species, selected_genomes)

    print("Len genomes per species: {}".format(len(genomes_per_species)))

    genomes, vcovs = ProfileGenerator.generate_vertical_coverage(selected_genomes, 0.2, 70)
    
    sample_output_folder = "{}/{}".format(samples_output_folder, sample_folder)
    mkdir_if_not_exists(sample_output_folder)

    # Write read simulation scripts
    ProfileGenerator.generate_scripts(sample_output_folder, sample_sim_shell_script, genomes, vcovs, "sample{}".format(s))

    # Write gold standard profiles
    with open(gold_standard_profile, 'w') as output:
        ProfileGenerator.write_profile(output, genomes, vcovs)

    print("Script file: {}".format(sample_sim_shell_script))
    

## For all samples

all_genomes = list(set(genome for species, genomes in genomes_per_species.items() for genome in genomes))
with open("{}/{}".format(output_folder_scripts, "gunzip.sh"), 'w') as out:
    out.write("#!/bin/bash\n\n")
    for genome in all_genomes:
        out.write("gunzip {}\n".format(genome.path))

with open("{}/{}".format(output_folder_scripts, "gzip.sh"), 'w') as out:
    out.write("#!/bin/bash\n\n")
    for genome in all_genomes:
        out.write("gzip {}\n".format(genome.unzipped_path()))

ProfileGenerator.generate_roary_scripts(output_folder, output_folder_scripts, genomes_per_species, batch_size=10)

for key, value in genomes_per_species.items():
    print(key)
    print(len(value))
    print(set(name.id for name in value))
